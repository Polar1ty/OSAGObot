import config
import telebot
from telebot import types
import urllib.parse
import dbworker
from datetime import datetime
import requests
import sqlite3 as sql
import json
import random
import tg_analytic
import os
import time

bot = telebot.TeleBot(config.TOKEN)


def log(message):
    print("<!------!>")
    print(datetime.now())
    print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {0} {1} (id = {2}) \n {3}".format(message.from_user.first_name,
                                                          message.from_user.last_name,
                                                          str(message.from_user.id), message.text))


def tariff_parsing(tariff):
    insurer_name = tariff['tariff']['insurer']['namePrint']
    payment = tariff['payment']
    franchise = tariff['tariff']['franchise']
    id = tariff['tariff']['id']
    type = tariff['tariff']['type']
    discounted_payment = tariff['discountedPayment']
    malus = tariff['tariff']['minBonusMalus']
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç–∏', callback_data=id)
    markup.add(button)
    return insurer_name, payment, franchise, id, markup, type, discounted_payment, malus


def city_into_dict(piece_of_json):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ –µ–≥–æ id –∏–∑ json-–∞"""
    dictionary = {
        'name_full': piece_of_json['nameFull'],
        'id': piece_of_json['id']
    }
    print(dictionary)
    return dictionary


# connection = sql.connect('DATABASE.sqlite')
# q = connection.cursor()
# q.execute('''
# 			CREATE TABLE "user" (
# 				'id' TEXT,
# 				'model_car' TEXT,
# 				'vin_code' TEXT,
# 				'number_car' TEXT,
# 				'category' TEXT,
# 				'car_year' TEXT,
# 				'surname' TEXT,
# 				'name' TEXT,
# 				'patronymic' TEXT,
# 				'date_of_birth' TEXT,
# 				'address' TEXT,
# 				'inn' TEXT,
# 				'email' TEXT,
# 				'phone' TEXT
# 			)''')
# connection.commit()
# q.close()
# connection.close()
#
# connection = sql.connect('DATABASE.sqlite')
# q = connection.cursor()
# q.execute('''
# 			CREATE TABLE "passport" (
# 			    'id' TEXT,
# 			    'series' TEXT,
# 			    'number' TEXT,
# 			    'date' TEXT,
# 			    'issued_by' TEXT
# 			)''')
# connection.commit()
# q.close()
# connection.close()


utility = {}


def date_from_to(message):
    date_raw = message.date
    date_from = datetime.fromtimestamp(int(date_raw)).strftime('%Y-%m-%d %H:%M:%S')
    date_from_list = date_from.split(' ')
    day_plus_one = int(date_from_list[0].split('-')[2]) + 1
    date_plus_one_day = date_from_list[0].split('-')[0] + '-' + date_from_list[0].split('-')[1] + '-' + str(
        day_plus_one).zfill(2)  # –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
    if str(day_plus_one) == '32' or str(day_plus_one) == '31':
        day_plus_one = '1'
        month_plus_one = int(date_from_list[0].split('-')[1]) + 1
        date_plus_one_day = date_from_list[0].split('-')[0] + '-' + str(month_plus_one).zfill(2) + '-' + str(
            day_plus_one).zfill(2)  # –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
    date_from_ewa = date_plus_one_day + 'T22:00:00.000+0000'  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –µ–≤—ã
    date_from_for_req = date_from_ewa.split('T')[0]  # –î–∞—Ç–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª–∏—Å–∞ –û–°–ê–ì–û
    year_plus_one = int(date_from_ewa.split('-')[0]) + 1
    list_without_Y = date_from.split(' ')[0].split('-')[1:3]
    not_list = '-' + list_without_Y[0] + '-' + list_without_Y[1]
    date_to_ewa = str(year_plus_one) + not_list + 'T' + date_from_list[1] + '.000+0000'  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –µ–≤—ã
    date_to_for_req = date_to_ewa.split('T')[0]  # –î–∞—Ç–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª–∏—Å–∞ –û–°–ê–ì–û
    print(date_from_ewa)
    return date_from_for_req, date_to_for_req, date_from_ewa


headers = {
    'content-type': 'application/x-www-form-urlencoded',
}
data = {
    'email': config.email,
    'password': config.password  # hashed
}
response = requests.post('https://web.ewa.ua/ewa/api/v9/user/login', headers=headers, data=data)
cookie = response.json()['sessionId']
sale_point = response.json()['user']['salePoint']['id']
user = response.json()['user']['id']
company_id = response.json()['user']['salePoint']['company']['id']
company_type = response.json()['user']['salePoint']['company']['type']
customer_category = 'NATURAL'
outside_ua = 'false'
taxi = 'false'
registration_type = 'PERMANENT_WITHOUT_OTK'
usage_mounths = '0'

cookies = {
    'JSESSIONID': cookie
}
headers = {
    'content-type': 'application/json'
}


@bot.message_handler(commands=['reset'])
def reset(message):
    tg_analytic.statistics(message.chat.id, message.text)
    try:
        dbworker.clear_db(message.chat.id)
        utility.pop(str(message.chat.id) + 'city1')
        utility.pop(str(message.chat.id) + 'city2')
        utility.pop(str(message.chat.id) + 'city3')
        utility.pop(str(message.chat.id) + 'city4')
        utility.pop(str(message.chat.id) + 'tariff1')
        utility.pop(str(message.chat.id) + 'tariff2')
        utility.pop(str(message.chat.id) + 'tariff3')
        utility.pop(str(message.chat.id) + 'tariff4')
        utility.pop(str(message.chat.id) + 'tariff5')
        utility.pop(str(message.chat.id) + 'tariff6')
        utility.pop(str(message.chat.id) + 'tariff7')
        utility.pop(str(message.chat.id) + 'tariff8')
        bot.send_message(message.chat.id,
                         '–¢–µ–ø–µ—Ä –≤—Å–µ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —è–∫ —Å–ª—ñ–¥!\n–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')
    except FileNotFoundError:
        utility.pop(str(message.chat.id) + 'city1')
        utility.pop(str(message.chat.id) + 'city2')
        utility.pop(str(message.chat.id) + 'city3')
        utility.pop(str(message.chat.id) + 'city4')
        utility.pop(str(message.chat.id) + 'tariff1')
        utility.pop(str(message.chat.id) + 'tariff2')
        utility.pop(str(message.chat.id) + 'tariff3')
        utility.pop(str(message.chat.id) + 'tariff4')
        utility.pop(str(message.chat.id) + 'tariff5')
        utility.pop(str(message.chat.id) + 'tariff6')
        utility.pop(str(message.chat.id) + 'tariff7')
        utility.pop(str(message.chat.id) + 'tariff8')
    except KeyError:
        bot.send_message(message.chat.id,
                         '–¢–µ–ø–µ—Ä –≤—Å–µ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —è–∫ —Å–ª—ñ–¥!\n–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')


@bot.message_handler(commands=['help'])
def help(message):
    tg_analytic.statistics(message.chat.id, message.text)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, –≤–æ–Ω–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.')
    dbworker.set_state(message.chat.id, config.States.S_HELP.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_HELP.value)
def getting_help_msg(message):
    help_msg = message.text
    try:
        doc_type = utility.get(str(message.chat.id) + 'doc_type')
    except KeyError:
        doc_type = ' '
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT * from user WHERE id='%s'" % message.from_user.id)
    results = q.fetchall()
    q.execute("SELECT * from passport WHERE id='%s'" % message.from_user.id)
    results1 = q.fetchall()
    connection.commit()
    q.close()
    connection.close()
    try:
        model = results[0][1]
    except IndexError:
        model = ''
    try:
        VIN = results[0][2]
    except IndexError:
        VIN = ''
    try:
        reg_number = results[0][3]
    except IndexError:
        reg_number = ''
    try:
        category = results[0][4]
    except IndexError:
        category = ''
    try:
        year_car = results[0][5]
    except IndexError:
        year_car = ''
    try:
        surname = results[0][6]
    except IndexError:
        surname = ''
    try:
        name = results[0][7]
    except IndexError:
        name = ''
    try:
        patronymic = results[0][8]
    except IndexError:
        patronymic = ''
    try:
        birth = results[0][9]
    except IndexError:
        birth = ''
    try:
        reg_addres = results[0][10]
    except IndexError:
        reg_addres = ''
    try:
        INN = results[0][11]
    except IndexError:
        INN = ''
    try:
        email = results[0][12]
    except IndexError:
        email = ''
    try:
        phone = results[0][13]
    except IndexError:
        phone = ''
    try:
        series = results1[0][1]
    except IndexError:
        series = ''
    try:
        doc_num = results1[0][2]
    except IndexError:
        doc_num = ''
    try:
        date = results1[0][3]
    except IndexError:
        date = ''
    try:
        organ = results1[0][4]
    except IndexError:
        organ = ''
    with open(f'{message.from_user.id}.txt', 'a', encoding='utf8') as f:
        f.write(
            f"# -*- coding: utf8 -*-\n\n\n–î–∞–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—èüöò\n\n–ú–æ–¥–µ–ª—å:  {model}\nVIN-–∫–æ–¥:  {VIN}\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä:  {reg_number}\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:  {category}\n–†—ñ–∫ –≤–∏–ø—É—Å–∫—É:  {year_car}\n\n–í–∞—à–∞ –æ—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—èüòâ\n\n–ü—Ä—ñ–∑–≤–∏—â–µ:  {surname}\n–Ü–º'—è:  {name}\n–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ:  {patronymic}\n–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–¥–µ–Ω–∏—è:  {birth}\n–ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:  {reg_addres}\n–Ü–ù–ü–ü:  {INN}\nEMAIL:  {email}\n–¢–µ–ª–µ—Ñ–æ–Ω:  {phone}\n\n–î–∞–Ω—ñ –≤–∞—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞üìñ\n\n–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}\n–°–µ—Ä—ñ—è/–ó–∞–ø–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞:  {series}\n–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:  {doc_num}\n–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ:  {date}\n–û—Ä–≥–∞–Ω, —â–æ –≤–∏–¥–∞–≤:  {organ}")
        time.sleep(1)
    bot.send_document(config.help_chat_id, open(f'{message.from_user.id}.txt', 'r', encoding='utf8'),
                      caption=f'–ê–≤—Ç–æ—Ä –ø–∏—Ç–∞–Ω–Ω—è: @{message.from_user.username}\n–ü–∏—Ç–∞–Ω–Ω—è: {help_msg}')
    os.remove(f'{message.from_user.id}.txt')
    bot.send_message(message.chat.id, '–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –≤ –æ–±—Ä–æ–±—Ü—ñ. –ù–µ–∑–∞–±–∞—Ä–æ–º –í–∞–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä')
    dbworker.clear_db(message.chat.id)


@bot.message_handler(commands=['rules'])
def rules(message):
    tg_analytic.statistics(message.chat.id, message.text)
    bot.send_message(message.chat.id,
                     '–£ –≤–∞—Å —î 15 —Ö–≤–∏–ª–∏–Ω –¥–ª—è —Ç–æ–≥–æ, —â–æ–±–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ø–ª–∞—Ç—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ª—ñ—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, —Ç–æ–º—É —Ä–∞–¥–∏–º–æ –æ–¥—Ä–∞–∑—É –º–∞—Ç–∏ –ø—ñ–¥ —Ä—É–∫–æ—é —É—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ - —Å–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –∑–∞—Å–æ–±—É (—Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç), –ø–∞—Å–ø–æ—Ä—Ç, id-–∫–∞—Ä—Ç—É –∞–±–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è.\n\n–í–≤–æ–¥–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Å–ª—ñ–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∞–±–∏ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É —É–Ω–∏–∫–Ω—É—Ç–∏ –±—É–¥—å-—è–∫–∏—Ö –Ω–µ–ø–æ—Ä–æ–∑—É–º—ñ–Ω—å –ø—Ä–∏ –Ω–∞—Å—Ç–∞–Ω–Ω—ñ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –≤–∏–ø–∞–¥–∫—É.\n\n–û–ø–ª–∞—Ç–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–ª–∞—Ç—ñ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É Liqpay –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –º–æ–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó Telegram, –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ desktop-–≤–µ—Ä—Å—ñ—ó –æ–ø–ª–∞—Ç–∞ –Ω–∞—Ä–∞–∑—ñ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ).\n\n–ü—Ä–∏ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–æ—Ç–∞, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /reset, —ñ –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.\n\n–ü—Ä–∏ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /help.\n\n–î–æ–≥–æ–≤—ñ—Ä –æ—Ñ–µ—Ä—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: http://zarazpolis.pp.ua/confidentiality.html')


@bot.message_handler(commands=['start'])
def hello(message):
    tg_analytic.statistics(message.chat.id, message.text)
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT EXISTS(SELECT 1 FROM user WHERE id='%s')" % message.from_user.id)
    results1 = q.fetchone()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button1 = types.KeyboardButton('–ü–Ü–î–Ü–ë–†–ê–¢–ò –ü–û–õ–Ü–° üöò')
    markup.add(button1)
    bot.send_message(message.chat.id,
                     '–í—ñ—Ç–∞—î–º–æ, {0.first_name}! –Ø - –±–æ—Ç {1.first_name}, –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.\n–ü–æ—á–∞—Ç–∏ - /start\n–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–æ—Ç–∞ - /reset\n–ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è - /rules\n–î–æ–ø–æ–º–æ–≥–∞ - /help'.format(
                         message.from_user, bot.get_me()), reply_markup=markup)
    q.execute("INSERT INTO 'user' (id) VALUES ('%s')" % message.from_user.id)
    connection.commit()
    q.close()
    connection.close()
    utility = {
        str(message.chat.id) + 'city1': '',
        str(message.chat.id) + 'city2': '',
        str(message.chat.id) + 'city3': '',
        str(message.chat.id) + 'city4': '',
        str(message.chat.id) + 'final_city_id': '',
        str(message.chat.id) + 'tariff1': '',
        str(message.chat.id) + 'tariff2': '',
        str(message.chat.id) + 'tariff3': '',
        str(message.chat.id) + 'tariff4': '',
        str(message.chat.id) + 'tariff5': '',
        str(message.chat.id) + 'tariff6': '',
        str(message.chat.id) + 'tariff7': '',
        str(message.chat.id) + 'tariff8': '',
        str(message.chat.id) + 'tariff_type': '',
        str(message.chat.id) + 'tariff_id': '',
        str(message.chat.id) + 'tariff_payment': '',
        str(message.chat.id) + 'tariff_discounted_payment': '',
        str(message.chat.id) + 'tariff_name': '',
        str(message.chat.id) + 'doc_type': '',
        str(message.chat.id) + 'contract_id': '',
        str(message.chat.id) + 'min_bonus_malus': '',
        str(message.chat.id) + 'car_year': '',
        str(message.chat.id) + 'order': '',
        str(message.chat.id) + 'car_changer': ''
    }

    # Saved for better times

    # else:
    #     bot.send_message(message.chat.id,
    #                      '–Ø –ø–∞–º\'—è—Ç–∞—é –≤–∞—Å! –Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å - –¢–∞–∫‚úÖ\n –Ø–∫—â–æ —Ç—Ä–µ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∞–±–æ –∂ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ñ –¥–∞–Ω—ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å - –ó–º—ñ–Ω–∏—Ç–∏‚ùé\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–±, –∞–±–æ —Ç–∞—Ä–∏—Ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å - –°–ø–æ—á–∞—Ç–∫—ÉüîÑ')
    #     connection.commit()
    #     q.close()
    #     connection.close()
    #     utility = {
    #         str(message.chat.id) + 'city1': '',
    #         str(message.chat.id) + 'city2': '',
    #         str(message.chat.id) + 'city3': '',
    #         str(message.chat.id) + 'city4': '',
    #         str(message.chat.id) + 'final_city_id': '',
    #         str(message.chat.id) + 'tariff1': '',
    #         str(message.chat.id) + 'tariff2': '',
    #         str(message.chat.id) + 'tariff3': '',
    #         str(message.chat.id) + 'tariff4': '',
    #         str(message.chat.id) + 'tariff5': '',
    #         str(message.chat.id) + 'tariff6': '',
    #         str(message.chat.id) + 'tariff7': '',
    #         str(message.chat.id) + 'tariff8': '',
    #         str(message.chat.id) + 'tariff_type': '',
    #         str(message.chat.id) + 'tariff_id': '',
    #         str(message.chat.id) + 'tariff_payment': '',
    #         str(message.chat.id) + 'tariff_discounted_payment': '',
    #         str(message.chat.id) + 'tariff_name': '',
    #         str(message.chat.id) + 'doc_type': '',
    #         str(message.chat.id) + 'contract_id': '',
    #         str(message.chat.id) + 'min_bonus_malus': '',
    #         str(message.chat.id) + 'car_year': '',
    #         str(message.chat.id) + 'order': ''
    #     }
    #     prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–ü–Ü–î–Ü–ë–†–ê–¢–ò –ü–û–õ–Ü–° üöò')
def auto_number(message):
    try:
        utility.pop(str(message.chat.id) + 'city1')
        utility.pop(str(message.chat.id) + 'city2')
        utility.pop(str(message.chat.id) + 'city3')
        utility.pop(str(message.chat.id) + 'city4')
        utility.pop(str(message.chat.id) + 'tariff1')
        utility.pop(str(message.chat.id) + 'tariff2')
        utility.pop(str(message.chat.id) + 'tariff3')
        utility.pop(str(message.chat.id) + 'tariff4')
        utility.pop(str(message.chat.id) + 'tariff5')
        utility.pop(str(message.chat.id) + 'tariff6')
        utility.pop(str(message.chat.id) + 'tariff7')
        utility.pop(str(message.chat.id) + 'tariff8')
    except KeyError:
        pass
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–ê–ê0000–ê–ê):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_NUMBER_CAR.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_NUMBER_CAR.value)
def asking_city(message):
    log(message)
    number_car = urllib.parse.quote(message.text)
    url = f'https://web.ewa.ua/ewa/api/v9/auto/mtibu/number?query={number_car}'
    response = requests.get(url, headers=headers, cookies=cookies)
    try:
        model = response.json()[0]['modelText']
        vin_code = str(response.json()[0]['bodyNumber']).upper()
        car_nmb = response.json()[0]['stateNumber']
        category = response.json()[0]['category']
        if category == 'D1' or category == 'D2':
            bot.send_message(message.chat.id,
                             'üöå–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∞–≤—Ç–æ–±—É—Å—ñ–≤ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.')
            auto_number(message)
        elif utility.get(str(message.chat.id) + 'car_changer') == '1':
            connection = sql.connect('DATABASE.sqlite')
            q = connection.cursor()
            q.execute("UPDATE user SET number_car='%s',category='%s',model_car='%s',vin_code='%s' WHERE id='%s'" % (
                message.text, category, model, vin_code, message.from_user.id))
            connection.commit()
            q.close()
            connection.close()
            bot.send_message(message.chat.id,
                             '–ú–æ–¥–µ–ª—å: {0}\nVIN-–∫–æ–¥: {1}\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä: {2}'.format(model, vin_code, car_nmb))
            utility.pop(str(message.chat.id) + 'car_changer')
            car_year_set(message)
        else:
            # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
            connection = sql.connect('DATABASE.sqlite')
            q = connection.cursor()
            q.execute("UPDATE user SET number_car='%s',category='%s',model_car='%s',vin_code='%s' WHERE id='%s'" % (
                message.text, category, model, vin_code, message.from_user.id))
            connection.commit()
            q.close()
            connection.close()
            bot.send_message(message.chat.id,
                             '–ú–æ–¥–µ–ª—å: {0}\nVIN-–∫–æ–¥: {1}\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä: {2}'.format(model, vin_code, car_nmb))
            bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–≤—Ç–æ:‚úç')
            dbworker.set_state(message.chat.id, config.States.S_SEARCH_CITY.value)
    except IndexError:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_SEARCH_CITY.value)
def final_city(message):
    log(message)
    registration_city = urllib.parse.quote(message.text)
    url = f'https://web.ewa.ua/ewa/api/v9/place?country=UA&query={registration_city}'
    city_response = requests.get(url, headers=headers, cookies=cookies)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if city_response.json() == []:
        bot.send_message(message.chat.id, '–¢–∞–∫–µ –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
        dbworker.set_state(message.chat.id, config.States.S_SEARCH_CITY.value)
    else:
        try:
            city1 = city_into_dict(city_response.json()[0])
            city2 = city_into_dict(city_response.json()[1])
            city3 = city_into_dict(city_response.json()[2])
            city4 = city_into_dict(city_response.json()[3])
        except IndexError:
            pass
        try:
            utility.update({str(message.chat.id) + 'city1': city1})
            utility.update({str(message.chat.id) + 'city2': city2})
            utility.update({str(message.chat.id) + 'city3': city3})
            utility.update({str(message.chat.id) + 'city4': city4})
        except UnboundLocalError:
            pass
        try:
            button1 = types.KeyboardButton(utility.get(str(message.chat.id) + 'city1')['name_full'])
            button2 = types.KeyboardButton(utility.get(str(message.chat.id) + 'city2')['name_full'])
            button3 = types.KeyboardButton(utility.get(str(message.chat.id) + 'city3')['name_full'])
            button4 = types.KeyboardButton(utility.get(str(message.chat.id) + 'city4')['name_full'])
        except TypeError:
            pass
        try:
            markup.add(button1)
            markup.add(button2)
            markup.add(button3)
            markup.add(button4)
        except:
            pass
        bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æüèô', reply_markup=markup)
        dbworker.set_state(message.chat.id, config.States.S_REGISTRATION_CITY.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_REGISTRATION_CITY.value)
def submitting(message):
    bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:üëá')
    try:
        if message.text == utility.get(str(message.chat.id) + 'city1')['name_full']:
            id = utility.get(str(message.chat.id) + 'city1')['id']
            utility.update({str(message.chat.id) + 'final_city_id': id})
        if message.text == utility.get(str(message.chat.id) + 'city2')['name_full']:
            id = utility.get(str(message.chat.id) + 'city2')['id']
            utility.update({str(message.chat.id) + 'final_city_id': id})
        if message.text == utility.get(str(message.chat.id) + 'city3')['name_full']:
            id = utility.get(str(message.chat.id) + 'city3')['id']
            utility.update({str(message.chat.id) + 'final_city_id': id})
        if message.text == utility.get(str(message.chat.id) + 'city4')['name_full']:
            id = utility.get(str(message.chat.id) + 'city4')['id']
            utility.update({str(message.chat.id) + 'final_city_id': id})
    except IndexError:
        pass
    except TypeError:
        pass
    date_for_req = date_from_to(message)
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT * from user WHERE id='%s'" % message.from_user.id)
    results = q.fetchall()
    connection.commit()
    q.close()
    connection.close()
    url = f'https://web.ewa.ua/ewa/api/v9/tariff/choose/policy?salePoint={sale_point}&customerCategory={customer_category}&taxi={taxi}&autoCategory={str(results[0][4])}&registrationPlace={id}&outsideUkraine={outside_ua}&registrationType={registration_type}&dateFrom={date_for_req[0]}&dateTo={date_for_req[1]}&usageMonths={usage_mounths}'
    response = requests.get(url, headers=headers, cookies=cookies)
    try:
        tariff1 = tariff_parsing(response.json()[0])
        tariff2 = tariff_parsing(response.json()[1])
        tariff3 = tariff_parsing(response.json()[2])
        tariff4 = tariff_parsing(response.json()[3])
        tariff5 = tariff_parsing(response.json()[4])
        tariff6 = tariff_parsing(response.json()[5])
        tariff7 = tariff_parsing(response.json()[6])
        tariff8 = tariff_parsing(response.json()[7])
    except IndexError:
        pass
    try:
        utility.update({str(message.chat.id) + 'tariff1': tariff1})
        utility.update({str(message.chat.id) + 'tariff2': tariff2})
        utility.update({str(message.chat.id) + 'tariff3': tariff3})
        utility.update({str(message.chat.id) + 'tariff4': tariff4})
        utility.update({str(message.chat.id) + 'tariff5': tariff5})
        utility.update({str(message.chat.id) + 'tariff6': tariff6})
        utility.update({str(message.chat.id) + 'tariff7': tariff7})
        utility.update({str(message.chat.id) + 'tariff8': tariff8})
    except:
        pass
    try:
        bot.send_message(message.chat.id,
                         f'üëî {utility.get(str(message.chat.id) + "tariff8")[0]}\nüíº –§—Ä–∞–Ω—à–∏–∑–∞: {utility.get(str(message.chat.id) + "tariff8")[2]}\n\nüíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {utility.get(str(message.chat.id) + "tariff8")[1]}',
                         reply_markup=utility.get(str(message.chat.id) + "tariff8")[4])
    except TypeError:
        pass
    try:
        bot.send_message(message.chat.id,
                         f'üëî {utility.get(str(message.chat.id) + "tariff7")[0]}\nüíº –§—Ä–∞–Ω—à–∏–∑–∞: {utility.get(str(message.chat.id) + "tariff7")[2]}\n\nüíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {utility.get(str(message.chat.id) + "tariff7")[1]}',
                         reply_markup=utility.get(str(message.chat.id) + "tariff7")[4])
    except TypeError:
        pass
    try:
        bot.send_message(message.chat.id,
                         f'üëî {utility.get(str(message.chat.id) + "tariff6")[0]}\nüíº –§—Ä–∞–Ω—à–∏–∑–∞: {utility.get(str(message.chat.id) + "tariff6")[2]}\n\nüíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {utility.get(str(message.chat.id) + "tariff6")[1]}',
                         reply_markup=utility.get(str(message.chat.id) + "tariff6")[4])
    except TypeError:
        pass
    try:
        bot.send_message(message.chat.id,
                         f'üëî {utility.get(str(message.chat.id) + "tariff5")[0]}\nüíº –§—Ä–∞–Ω—à–∏–∑–∞: {utility.get(str(message.chat.id) + "tariff5")[2]}\n\nüíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {utility.get(str(message.chat.id) + "tariff5")[1]}',
                         reply_markup=utility.get(str(message.chat.id) + "tariff5")[4])
    except TypeError:
        pass
    try:
        bot.send_message(message.chat.id,
                         f'üëî {utility.get(str(message.chat.id) + "tariff4")[0]}\nüíº –§—Ä–∞–Ω—à–∏–∑–∞: {utility.get(str(message.chat.id) + "tariff4")[2]}\n\nüíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {utility.get(str(message.chat.id) + "tariff4")[1]}',
                         reply_markup=utility.get(str(message.chat.id) + "tariff4")[4])
    except TypeError:
        pass
    try:
        bot.send_message(message.chat.id,
                         f'üëî {utility.get(str(message.chat.id) + "tariff3")[0]}\nüíº –§—Ä–∞–Ω—à–∏–∑–∞: {utility.get(str(message.chat.id) + "tariff3")[2]}\n\nüíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {utility.get(str(message.chat.id) + "tariff3")[1]}',
                         reply_markup=utility.get(str(message.chat.id) + "tariff3")[4])
    except TypeError:
        pass
    try:
        bot.send_message(message.chat.id,
                         f'üëî {utility.get(str(message.chat.id) + "tariff2")[0]}\nüíº –§—Ä–∞–Ω—à–∏–∑–∞: {utility.get(str(message.chat.id) + "tariff2")[2]}\n\nüíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {utility.get(str(message.chat.id) + "tariff2")[1]}',
                         reply_markup=utility.get(str(message.chat.id) + "tariff2")[4])
    except TypeError:
        pass
    try:
        bot.send_message(message.chat.id,
                         f'üëî {utility.get(str(message.chat.id) + "tariff1")[0]}\nüíº –§—Ä–∞–Ω—à–∏–∑–∞: {utility.get(str(message.chat.id) + "tariff1")[2]}\n\nüíµ –í–∞—Ä—Ç—ñ—Å—Ç—å: {utility.get(str(message.chat.id) + "tariff1")[1]}',
                         reply_markup=utility.get(str(message.chat.id) + "tariff1")[4])
    except TypeError:
        pass


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        print(call.data, type(call.data))
        print(utility.get(str(call.message.chat.id) + 'tariff1')[3],
              type(utility.get(str(call.message.chat.id) + 'tariff1')[3]))
        if int(call.data) == utility.get(str(call.message.chat.id) + 'tariff1')[3]:
            utility.update(
                {str(call.message.chat.id) + 'tariff_id': utility.get(str(call.message.chat.id) + "tariff1")[3]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_type': utility.get(str(call.message.chat.id) + "tariff1")[5]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_payment': utility.get(str(call.message.chat.id) + "tariff1")[1]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_discounted_payment':
                     utility.get(str(call.message.chat.id) + "tariff1")[6]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_name': utility.get(str(call.message.chat.id) + "tariff1")[0]})
            utility.update(
                {str(call.message.chat.id) + 'min_bonus_malus': utility.get(str(call.message.chat.id) + "tariff1")[7]})
            if utility.get(str(call.message.chat.id) + 'car_year') is None:
                bot.send_message(call.message.chat.id,
                                 '–î–æ–±—Ä–µ!üëç\n–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n(–ø—É–Ω–∫—Ç B.2 —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–ó)‚úç')
                dbworker.set_state(call.message.chat.id, config.States.S_CAR_YEAR.value)
            else:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):')
                dbworker.set_state(call.message.chat.id, config.States.S_SURNAME.value)
        if int(call.data) == utility.get(str(call.message.chat.id) + 'tariff2')[3]:
            utility.update(
                {str(call.message.chat.id) + 'tariff_id': utility.get(str(call.message.chat.id) + "tariff2")[3]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_type': utility.get(str(call.message.chat.id) + "tariff2")[5]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_payment': utility.get(str(call.message.chat.id) + "tariff2")[1]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_discounted_payment':
                     utility.get(str(call.message.chat.id) + "tariff2")[6]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_name': utility.get(str(call.message.chat.id) + "tariff2")[0]})
            utility.update(
                {str(call.message.chat.id) + 'min_bonus_malus': utility.get(str(call.message.chat.id) + "tariff2")[7]})
            if utility.get(str(call.message.chat.id) + 'car_year') is None:
                bot.send_message(call.message.chat.id,
                                 '–î–æ–±—Ä–µ!üëç\n–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n(–ø—É–Ω–∫—Ç B.2 —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–ó)‚úç')
                dbworker.set_state(call.message.chat.id, config.States.S_CAR_YEAR.value)
            else:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):')
                dbworker.set_state(call.message.chat.id, config.States.S_SURNAME.value)
        if int(call.data) == utility.get(str(call.message.chat.id) + 'tariff3')[3]:
            utility.update(
                {str(call.message.chat.id) + 'tariff_id': utility.get(str(call.message.chat.id) + "tariff3")[3]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_type': utility.get(str(call.message.chat.id) + "tariff3")[5]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_payment': utility.get(str(call.message.chat.id) + "tariff3")[1]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_discounted_payment':
                     utility.get(str(call.message.chat.id) + "tariff3")[6]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_name': utility.get(str(call.message.chat.id) + "tariff3")[0]})
            utility.update(
                {str(call.message.chat.id) + 'min_bonus_malus': utility.get(str(call.message.chat.id) + "tariff3")[7]})
            if utility.get(str(call.message.chat.id) + 'car_year') is None:
                bot.send_message(call.message.chat.id,
                                 '–î–æ–±—Ä–µ!üëç\n–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n(–ø—É–Ω–∫—Ç B.2 —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–ó)‚úç')
                dbworker.set_state(call.message.chat.id, config.States.S_CAR_YEAR.value)
            else:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):')
                dbworker.set_state(call.message.chat.id, config.States.S_SURNAME.value)
        if int(call.data) == utility.get(str(call.message.chat.id) + 'tariff4')[3]:
            utility.update(
                {str(call.message.chat.id) + 'tariff_id': utility.get(str(call.message.chat.id) + "tariff4")[3]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_type': utility.get(str(call.message.chat.id) + "tariff4")[5]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_payment': utility.get(str(call.message.chat.id) + "tariff4")[1]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_discounted_payment':
                     utility.get(str(call.message.chat.id) + "tariff4")[6]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_name': utility.get(str(call.message.chat.id) + "tariff4")[0]})
            utility.update(
                {str(call.message.chat.id) + 'min_bonus_malus': utility.get(str(call.message.chat.id) + "tariff4")[7]})
            if utility.get(str(call.message.chat.id) + 'car_year') is None:
                bot.send_message(call.message.chat.id,
                                 '–î–æ–±—Ä–µ!üëç\n–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n(–ø—É–Ω–∫—Ç B.2 —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–ó)‚úç')
                dbworker.set_state(call.message.chat.id, config.States.S_CAR_YEAR.value)
            else:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):')
                dbworker.set_state(call.message.chat.id, config.States.S_SURNAME.value)
        if int(call.data) == utility.get(str(call.message.chat.id) + 'tariff5')[3]:
            utility.update(
                {str(call.message.chat.id) + 'tariff_id': utility.get(str(call.message.chat.id) + "tariff5")[3]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_type': utility.get(str(call.message.chat.id) + "tariff5")[5]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_payment': utility.get(str(call.message.chat.id) + "tariff5")[1]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_discounted_payment':
                     utility.get(str(call.message.chat.id) + "tariff5")[6]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_name': utility.get(str(call.message.chat.id) + "tariff5")[0]})
            utility.update(
                {str(call.message.chat.id) + 'min_bonus_malus': utility.get(str(call.message.chat.id) + "tariff5")[7]})
            if utility.get(str(call.message.chat.id) + 'car_year') is None:
                bot.send_message(call.message.chat.id,
                                 '–î–æ–±—Ä–µ!üëç\n–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n(–ø—É–Ω–∫—Ç B.2 —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–ó)‚úç')
                dbworker.set_state(call.message.chat.id, config.States.S_CAR_YEAR.value)
            else:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):')
                dbworker.set_state(call.message.chat.id, config.States.S_SURNAME.value)
        if int(call.data) == utility.get(str(call.message.chat.id) + 'tariff6')[3]:
            utility.update(
                {str(call.message.chat.id) + 'tariff_id': utility.get(str(call.message.chat.id) + "tariff6")[3]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_type': utility.get(str(call.message.chat.id) + "tariff6")[5]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_payment': utility.get(str(call.message.chat.id) + "tariff6")[1]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_discounted_payment':
                     utility.get(str(call.message.chat.id) + "tariff6")[6]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_name': utility.get(str(call.message.chat.id) + "tariff6")[0]})
            utility.update(
                {str(call.message.chat.id) + 'min_bonus_malus': utility.get(str(call.message.chat.id) + "tariff6")[7]})
            if utility.get(str(call.message.chat.id) + 'car_year') is None:
                bot.send_message(call.message.chat.id,
                                 '–î–æ–±—Ä–µ!üëç\n–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n(–ø—É–Ω–∫—Ç B.2 —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–ó)‚úç')
                dbworker.set_state(call.message.chat.id, config.States.S_CAR_YEAR.value)
            else:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):')
                dbworker.set_state(call.message.chat.id, config.States.S_SURNAME.value)
        if int(call.data) == utility.get(str(call.message.chat.id) + 'tariff7')[3]:
            utility.update(
                {str(call.message.chat.id) + 'tariff_id': utility.get(str(call.message.chat.id) + "tariff7")[3]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_type': utility.get(str(call.message.chat.id) + "tariff7")[5]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_payment': utility.get(str(call.message.chat.id) + "tariff7")[1]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_discounted_payment':
                     utility.get(str(call.message.chat.id) + "tariff7")[6]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_name': utility.get(str(call.message.chat.id) + "tariff7")[0]})
            utility.update(
                {str(call.message.chat.id) + 'min_bonus_malus': utility.get(str(call.message.chat.id) + "tariff7")[7]})
            if utility.get(str(call.message.chat.id) + 'car_year') is None:
                bot.send_message(call.message.chat.id,
                                 '–î–æ–±—Ä–µ!üëç\n–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n(–ø—É–Ω–∫—Ç B.2 —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–ó)‚úç')
                dbworker.set_state(call.message.chat.id, config.States.S_CAR_YEAR.value)
            else:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):')
                dbworker.set_state(call.message.chat.id, config.States.S_SURNAME.value)
        if int(call.data) == utility.get(str(call.message.chat.id) + 'tariff8')[3]:
            utility.update(
                {str(call.message.chat.id) + 'tariff_id': utility.get(str(call.message.chat.id) + "tariff8")[3]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_type': utility.get(str(call.message.chat.id) + "tariff8")[5]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_payment': utility.get(str(call.message.chat.id) + "tariff8")[1]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_discounted_payment':
                     utility.get(str(call.message.chat.id) + "tariff8")[6]})
            utility.update(
                {str(call.message.chat.id) + 'tariff_name': utility.get(str(call.message.chat.id) + "tariff8")[0]})
            utility.update(
                {str(call.message.chat.id) + 'min_bonus_malus': utility.get(str(call.message.chat.id) + "tariff8")[7]})
            if utility.get(str(call.message.chat.id) + 'car_year') is None:
                bot.send_message(call.message.chat.id,
                                 '–î–æ–±—Ä–µ!üëç\n–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n(–ø—É–Ω–∫—Ç B.2 —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¢–ó)‚úç')
                dbworker.set_state(call.message.chat.id, config.States.S_CAR_YEAR.value)
            else:
                bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):')
                dbworker.set_state(call.message.chat.id, config.States.S_SURNAME.value)
    except IndexError:
        pass
    except TypeError:
        pass


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_CAR_YEAR.value)
def car_year_taking(message):
    log(message)
    car_year = message.text
    if len(car_year) != 4:
        bot.send_message(message.chat.id, '–†—ñ–∫ –≤–∏–ø—É—Å–∫—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 4 —Ü–∏—Ñ—Ä–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ 2020. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.')
        dbworker.set_state(message.chat.id, config.States.S_CAR_YEAR.value)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("UPDATE user SET car_year='%s' WHERE id='%s'" % (car_year, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        # database
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ(—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):‚úç')
        dbworker.set_state(message.chat.id, config.States.S_SURNAME.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_SURNAME.value)
def surname_taking(message):
    log(message)
    surname = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET surname='%s' WHERE id='%s'" % (surname, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    # database
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):‚úç")
    dbworker.set_state(message.chat.id, config.States.S_NAME.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_NAME.value)
def name_taking(message):
    log(message)
    name = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET name='%s' WHERE id='%s'" % (name, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    # database
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_PATRONYMIC.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_PATRONYMIC.value)
def patronymic_taking(message):
    log(message)
    patronymic = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET patronymic='%s' WHERE id='%s'" % (patronymic, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    # database
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Å–≤–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è\n\n(—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_DATE_OF_BIRTH.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_DATE_OF_BIRTH.value)
def date_of_birth_taking(message):
    log(message)
    date_of_birth = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET date_of_birth='%s' WHERE id='%s'" % (date_of_birth, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    # database
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Å–≤–æ—î—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\n\n(—É —Ñ–æ—Ä–º–∞—Ç—ñ: –º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –¥—ñ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_ADDRESS.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_ADDRESS.value)
def address_taking(message):
    log(message)
    address = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET address='%s' WHERE id='%s'" % (address, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    # database
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ü–ù–ü–ü (10 —Ü–∏—Ñ—Ä):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_INN.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_INN.value)
def inn_taking(message):
    log(message)
    inn = message.text
    if len(inn) != 10:
        bot.send_message(message.chat.id, '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        dbworker.set_state(message.chat.id, config.States.S_INN.value)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("UPDATE user SET inn='%s' WHERE id='%s'" % (inn, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        # database
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å email, –Ω–∞ —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞—Ç—î –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –ø–æ–ª—ñ—Å:‚úç')
        dbworker.set_state(message.chat.id, config.States.S_EMAIL.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_EMAIL.value)
def email_taking(message):
    log(message)
    email = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET email='%s' WHERE id='%s'" % (email, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    # database
    bot.send_message(message.chat.id,
                     '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞ —è–∫–∏–π –º–∏ –≤–∏—à–ª–µ–º–æ –°–ú–° –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–ª—ñ—Å—É (–º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –Ω–∞ +380):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_PHONE.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_PHONE.value)
def phone_taking(message):
    log(message)
    phone = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET phone='%s' WHERE id='%s'" % (phone, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    # bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–µ—Ä—ñ—é –ø–∞—Å–ø–æ—Ä—Ç–∞ (2 –ª—ñ—Ç–µ—Ä–∏):‚úç')
    # dbworker.set_state(message.chat.id, config.States.S_SERIES.value)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button1 = types.KeyboardButton('–ü–∞—Å–ø–æ—Ä—Ç üìñ')
    button2 = types.KeyboardButton('ID-–∫–∞—Ä—Ç–∞')
    button3 = types.KeyboardButton('–ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è üöò')
    markup.add(button1, button2, button3)
    bot.send_message(message.chat.id, '–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç:', reply_markup=markup)
    dbworker.clear_db(message.chat.id)


# ----------------------------------------------------------------------------------------------------------------------


@bot.message_handler(func=lambda message: message.text == '–ü–∞—Å–ø–æ—Ä—Ç üìñ')
def passport(message):
    utility.update({str(message.chat.id) + 'doc_type': 'PASSPORT'})
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–µ—Ä—ñ—é –ø–∞—Å–ø–æ—Ä—Ç–∞ (2 –ª—ñ—Ç–µ—Ä–∏):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_SERIES.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_SERIES.value)
def series_taking(message):
    log(message)
    series = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT EXISTS(SELECT 1 FROM passport WHERE id='%s')" % message.from_user.id)
    results1 = q.fetchone()
    if results1[0] != 1:
        q.execute("INSERT INTO 'passport' (id) VALUES ('%s')" % message.from_user.id)
    q.execute("UPDATE passport SET series='%s' WHERE id='%s'" % (series, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (6 —Ü–∏—Ñ—Ä):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_NUMBER.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_NUMBER.value)
def number_taking(message):
    log(message)
    number = message.text
    if len(number) != 6:
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 6 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        dbworker.set_state(message.chat.id, config.States.S_NUMBER.value)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("UPDATE passport SET number='%s' WHERE id='%s'" % (number, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤–∏–¥–∞—á—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞ (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î):‚úç')
        dbworker.set_state(message.chat.id, config.States.S_DATE.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_DATE.value)
def date_taking(message):
    log(message)
    date = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET date='%s' WHERE id='%s'" % (date, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –æ—Ä–≥–∞–Ω, —â–æ –≤–∏–¥–∞–≤ –ø–∞—Å–ø–æ—Ä—Ç:‚úç')
    dbworker.set_state(message.chat.id, config.States.S_ISSUED_BY.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_ISSUED_BY.value)
def issued_taking(message):
    log(message)
    issued_by = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET issued_by='%s' WHERE id='%s'" % (issued_by, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


# ----------------------------------------------------------------------------------------------------------------------


@bot.message_handler(func=lambda message: message.text == 'ID-–∫–∞—Ä—Ç–∞')
def id_card(message):
    utility.update({str(message.chat.id) + 'doc_type': 'ID_PASSPORT'})
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Å ID –∫–∞—Ä—Ç–∏(14 —Å–∏–º–≤–æ–ª—ñ–≤):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_ID_SERIES.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_ID_SERIES.value)
def series_id_taking(message):
    log(message)
    series = message.text
    if len(series) != 14:
        bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å ID-–∫–∞—Ä—Ç–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 14 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        id_card(message)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("SELECT EXISTS(SELECT 1 FROM passport WHERE id='%s')" % message.from_user.id)
        results1 = q.fetchone()
        if results1[0] != 1:
            q.execute("INSERT INTO 'passport' (id) VALUES ('%s')" % message.from_user.id)
        q.execute("UPDATE passport SET series='%s' WHERE id='%s'" % (series, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä ID-–∫–∞—Ä—Ç–∏(9 —Ü–∏—Ñ—Ä):‚úç')
        dbworker.set_state(message.chat.id, config.States.S_ID_NUMBER.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_ID_NUMBER.value)
def number_id_taking(message):
    log(message)
    number = message.text
    if len(number) != 9:
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä ID-–∫–∞—Ä—Ç–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 9 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        dbworker.set_state(message.chat.id, config.States.S_ID_NUMBER.value)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("UPDATE passport SET number='%s' WHERE id='%s'" % (number, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤–∏–¥–∞—á—ñ ID-–∫–∞—Ä—Ç–∏ (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î):‚úç')
        dbworker.set_state(message.chat.id, config.States.S_ID_DATE.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_ID_DATE.value)
def date_id_taking(message):
    log(message)
    date = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET date='%s' WHERE id='%s'" % (date, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –æ—Ä–≥–∞–Ω, —â–æ –≤–∏–¥–∞–≤ ID-–∫–∞—Ä—Ç—É(4 —Ü–∏—Ñ—Ä–∏):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_ID_ISSUED_BY.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_ID_ISSUED_BY.value)
def issued_id_taking(message):
    log(message)
    issued_by = message.text
    if len(issued_by) != 4:
        bot.send_message(message.chat.id, '–û—Ä–≥–∞–Ω –≤–∏–¥–∞—á—ñ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 4 —Ü–∏—Ñ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        dbworker.set_state(message.chat.id, config.States.S_ID_ISSUED_BY.value)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("UPDATE passport SET issued_by='%s' WHERE id='%s'" % (issued_by, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        prefinal(message)


# ----------------------------------------------------------------------------------------------------------------------


@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è üöò')
def driver_license(message):
    utility.update({str(message.chat.id) + 'doc_type': 'DRIVING_LICENSE'})
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–µ—Ä—ñ—é –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è(3 —Å–∏–º–≤–æ–ª–∏):‚úç')
    dbworker.set_state(message.chat.id, config.States.S_DRIVER_SERIES.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_DRIVER_SERIES.value)
def series_driver_taking(message):
    log(message)
    series = message.text
    if len(series) != 3:
        bot.send_message(message.chat.id, '–°–µ—Ä—ñ—è –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 3 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        driver_license(message)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("SELECT EXISTS(SELECT 1 FROM passport WHERE id='%s')" % message.from_user.id)
        results1 = q.fetchone()
        if results1[0] != 1:
            q.execute("INSERT INTO 'passport' (id) VALUES ('%s')" % message.from_user.id)
        q.execute("UPDATE passport SET series='%s' WHERE id='%s'" % (series, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è(6 —Ü–∏—Ñ—Ä):‚úç')
        dbworker.set_state(message.chat.id, config.States.S_DRIVER_NUMBER.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_DRIVER_NUMBER.value)
def number_driver_taking(message):
    log(message)
    number = message.text
    if len(number) != 6:
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 6 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        dbworker.set_state(message.chat.id, config.States.S_DRIVER_NUMBER.value)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("UPDATE passport SET number='%s' WHERE id='%s'" % (number, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤–∏–¥–∞—á—ñ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î):‚úç')
        dbworker.set_state(message.chat.id, config.States.S_DRIVER_DATE.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_DRIVER_DATE.value)
def date_driver_taking(message):
    log(message)
    date = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET date='%s' WHERE id='%s'" % (date, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –æ—Ä–≥–∞–Ω, —â–æ –≤–∏–¥–∞–≤ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è:‚úç')
    dbworker.set_state(message.chat.id, config.States.S_DRIVER_ISSUED_BY.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_DRIVER_ISSUED_BY.value)
def issued_driver_taking(message):
    log(message)
    issued_by = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET issued_by='%s' WHERE id='%s'" % (issued_by, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


def prefinal(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button1 = types.KeyboardButton('–¢–∞–∫‚úî')
    button2 = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏‚úñ')
    button3 = types.KeyboardButton('–°–ø–æ—á–∞—Ç–∫—ÉüîÑ')
    markup.add(button1, button2, button3)
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT * from user WHERE id='%s'" % message.from_user.id)
    results = q.fetchall()
    q.execute("SELECT * from passport WHERE id='%s'" % message.from_user.id)
    results1 = q.fetchall()
    connection.commit()
    q.close()
    connection.close()
    try:
        model = results[0][1]
    except IndexError:
        model = ''
    try:
        VIN = results[0][2]
    except IndexError:
        VIN = ''
    try:
        reg_number = results[0][3]
    except IndexError:
        reg_number = ''
    try:
        category = results[0][4]
    except IndexError:
        category = ''
    try:
        year_car = results[0][5]
    except IndexError:
        year_car = ''
    try:
        surname = results[0][6]
    except IndexError:
        surname = ''
    try:
        name = results[0][7]
    except IndexError:
        name = ''
    try:
        patronymic = results[0][8]
    except IndexError:
        patronymic = ''
    try:
        birth = results[0][9]
    except IndexError:
        birth = ''
    try:
        reg_addres = results[0][10]
    except IndexError:
        reg_addres = ''
    try:
        INN = results[0][11]
    except IndexError:
        INN = ''
    try:
        email = results[0][12]
    except IndexError:
        email = ''
    try:
        phone = results[0][13]
    except IndexError:
        phone = ''
    try:
        series = results1[0][1]
    except IndexError:
        series = ''
    try:
        doc_num = results1[0][2]
    except IndexError:
        doc_num = ''
    try:
        date = results1[0][3]
    except IndexError:
        date = ''
    try:
        organ = results1[0][4]
    except IndexError:
        organ = ''
    bot.send_message(message.chat.id,
                     f"–î–∞–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—èüöò\n\n–ú–æ–¥–µ–ª—å:  {model}\nVIN-–∫–æ–¥:  {VIN}\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä:  {reg_number}\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:  {category}\n–†—ñ–∫ –≤–∏–ø—É—Å–∫—É:  {year_car}\n\n–í–∞—à–∞ –æ—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—èüòâ\n\n–ü—Ä—ñ–∑–≤–∏—â–µ:  {surname}\n–Ü–º'—è:  {name}\n–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ:  {patronymic}\n–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–¥–µ–Ω–∏—è:  {birth}\n–ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:  {reg_addres}\n–Ü–ù–ü–ü:  {INN}\nEMAIL:  {email}\n–¢–µ–ª–µ—Ñ–æ–Ω:  {phone}\n\n–î–∞–Ω—ñ –≤–∞—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞üìñ\n\n–°–µ—Ä—ñ—è/–ó–∞–ø–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞:  {series}\n–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:  {doc_num}\n–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ:  {date}\n–û—Ä–≥–∞–Ω, —â–æ –≤–∏–¥–∞–≤:  {organ}",
                     reply_markup=markup)
    dbworker.clear_db(message.chat.id)


@bot.message_handler(func=lambda message: message.text == '–°–ø–æ—á–∞—Ç–∫—ÉüîÑ')
def again(message):
    auto_number(message)


@bot.message_handler(func=lambda message: message.text == '–¢–∞–∫‚úî')
def yes(message):
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT * from user WHERE id='%s'" % message.from_user.id)
    results = q.fetchall()
    q.execute("SELECT * from passport WHERE id='%s'" % message.from_user.id)
    results1 = q.fetchall()
    model = urllib.parse.quote(results[0][1])
    connection.commit()
    q.close()
    connection.close()

    bot.send_message(message.chat.id, '–î–æ–±—Ä–µ!\nüìù–§–æ—Ä–º—É—é –¥–æ–≥–æ–≤—ñ—Ä\n‚è≥–ó–∞—á–µ–∫–∞–π—Ç–µ',
                     reply_markup=types.ReplyKeyboardRemove())

    d = date_from_to(message)

    url = f'https://web.ewa.ua/ewa/api/v9/auto_model/maker_and_model?query={model}'
    response = requests.get(url, headers=headers, cookies=cookies)
    if str(utility.get(str(message.chat.id) + 'doc_type')) == 'ID_PASSPORT':
        try:
            model_id = response.json()[0]['id']
            marka_id = response.json()[0]['autoMaker']['id']
            modelText = results[0][1]
            contract_data = {
                'type': 'epolicy',
                'salePoint': {'id': sale_point,
                              'company': {
                                  'type': company_type,
                                  'id': company_id
                              }},
                'user': {'id': user},
                'payment': str(utility.get(str(message.chat.id) + 'tariff_payment')),
                'brokerDiscountedPayment': str(utility.get(str(message.chat.id) + 'tariff_discounted_payment')),
                'tariff': {
                    'type': str(utility.get(str(message.chat.id) + 'tariff_type')),
                    'id': str(utility.get(str(message.chat.id) + 'tariff_id'))
                },
                'date': datetime.fromtimestamp(int(message.date)).strftime('%Y-%m-%d'),
                'dateFrom': d[2],
                'customer': {
                    'code': results[0][11],
                    'nameLast': results[0][7],
                    'nameFirst': results[0][6],
                    'nameMiddle': results[0][8],
                    'address': results[0][10],
                    'phone': results[0][13],
                    'email': results[0][12],
                    'birthDate': results[0][9],
                    'document': {
                        'type': str(utility.get(str(message.chat.id) + 'doc_type')),
                        'record': results1[0][1],
                        'number': results1[0][2],
                        'date': results1[0][3],
                        'issuedBy': results1[0][4]
                    }
                },
                'insuranceObject': {
                    'type': 'auto',
                    'category': results[0][4],
                    'model': {
                        'id': model_id,
                        'autoMaker': {
                            'id': marka_id
                        }
                    },
                    'modelText': modelText,
                    'bodyNumber': results[0][2],
                    'stateNumber': str(results[0][3]).upper(),
                    'registrationPlace': {
                        'id': str(utility.get(str(message.chat.id) + 'final_city_id')),
                    },
                    'registrationType': registration_type,  # –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –±—Ä–∞—Ç—å
                    'year': results[0][5],
                },
                'state': 'DRAFT',
                'bonusMalus': utility.get(str(message.chat.id) + 'min_bonus_malus')
            }
            print(model_id, marka_id)
        except IndexError:
            modelText = results[0][1]
            contract_data = {
                'type': 'epolicy',
                'salePoint': {'id': sale_point,
                              'company': {
                                  'type': company_type,
                                  'id': company_id
                              }},
                'user': {'id': user},
                'payment': str(utility.get(str(message.chat.id) + 'tariff_payment')),
                'brokerDiscountedPayment': str(utility.get(str(message.chat.id) + 'tariff_discounted_payment')),
                'tariff': {
                    'type': str(utility.get(str(message.chat.id) + 'tariff_type')),
                    'id': str(utility.get(str(message.chat.id) + 'tariff_id'))
                },
                'date': datetime.fromtimestamp(int(message.date)).strftime('%Y-%m-%d'),
                'dateFrom': d[2],
                'customer': {
                    'code': results[0][11],
                    'nameLast': results[0][7],
                    'nameFirst': results[0][6],
                    'nameMiddle': results[0][8],
                    'address': results[0][10],
                    'phone': results[0][13],
                    'email': results[0][12],
                    'birthDate': results[0][9],
                    'document': {
                        'type': str(utility.get(str(message.chat.id) + 'doc_type')),
                        'record': results1[0][1],
                        'number': results1[0][2],
                        'date': results1[0][3],
                        'issuedBy': results1[0][4]
                    }
                },
                'insuranceObject': {
                    'type': 'auto',
                    'category': results[0][4],
                    'modelText': modelText,
                    'bodyNumber': results[0][2],
                    'stateNumber': str(results[0][3]).upper(),
                    'registrationPlace': {
                        'id': utility.get(str(message.chat.id) + 'final_city_id'),
                    },
                    'registrationType': registration_type,  # –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –±—Ä–∞—Ç—å
                    'year': results[0][5],
                },
                'state': 'DRAFT',
                'bonusMalus': utility.get(str(message.chat.id) + 'min_bonus_malus')
            }
            print(f"–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ {modelText}")
    else:
        try:
            model_id = response.json()[0]['id']
            marka_id = response.json()[0]['autoMaker']['id']
            modelText = results[0][1]
            contract_data = {
                'type': 'epolicy',
                'salePoint': {'id': sale_point,
                              'company': {
                                  'type': company_type,
                                  'id': company_id
                              }},
                'user': {'id': user},
                'payment': str(utility.get(str(message.chat.id) + 'tariff_payment')),
                'brokerDiscountedPayment': str(utility.get(str(message.chat.id) + 'tariff_discounted_payment')),
                'tariff': {
                    'type': str(utility.get(str(message.chat.id) + 'tariff_type')),
                    'id': str(utility.get(str(message.chat.id) + 'tariff_id'))
                },
                'date': datetime.fromtimestamp(int(message.date)).strftime('%Y-%m-%d'),
                'dateFrom': d[2],
                'customer': {
                    'code': results[0][11],
                    'nameLast': results[0][7],
                    'nameFirst': results[0][6],
                    'nameMiddle': results[0][8],
                    'address': results[0][10],
                    'phone': results[0][13],
                    'email': results[0][12],
                    'birthDate': results[0][9],
                    'document': {
                        'type': str(utility.get(str(message.chat.id) + 'doc_type')),
                        'series': results1[0][1],
                        'number': results1[0][2],
                        'date': results1[0][3],
                        'issuedBy': results1[0][4]
                    }
                },
                'insuranceObject': {
                    'type': 'auto',
                    'category': results[0][4],
                    'model': {
                        'id': model_id,
                        'autoMaker': {
                            'id': marka_id
                        }
                    },
                    'modelText': modelText,
                    'bodyNumber': results[0][2],
                    'stateNumber': str(results[0][3]).upper(),
                    'registrationPlace': {
                        'id': str(utility.get(str(message.chat.id) + 'final_city_id')),
                    },
                    'registrationType': registration_type,  # –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –±—Ä–∞—Ç—å
                    'year': results[0][5],
                },
                'state': 'DRAFT',
                'bonusMalus': utility.get(str(message.chat.id) + 'min_bonus_malus')
            }
            print(model_id, marka_id)
        except IndexError:
            modelText = results[0][1]
            contract_data = {
                'type': 'epolicy',
                'salePoint': {'id': sale_point,
                              'company': {
                                  'type': company_type,
                                  'id': company_id
                              }},
                'user': {'id': user},
                'payment': str(utility.get(str(message.chat.id) + 'tariff_payment')),
                'brokerDiscountedPayment': str(utility.get(str(message.chat.id) + 'tariff_discounted_payment')),
                'tariff': {
                    'type': str(utility.get(str(message.chat.id) + 'tariff_type')),
                    'id': str(utility.get(str(message.chat.id) + 'tariff_id'))
                },
                'date': datetime.fromtimestamp(int(message.date)).strftime('%Y-%m-%d'),
                'dateFrom': d[2],
                'customer': {
                    'code': results[0][11],
                    'nameLast': results[0][7],
                    'nameFirst': results[0][6],
                    'nameMiddle': results[0][8],
                    'address': results[0][10],
                    'phone': results[0][13],
                    'email': results[0][12],
                    'birthDate': results[0][9],
                    'document': {
                        'type': str(utility.get(str(message.chat.id) + 'doc_type')),
                        'series': results1[0][1],
                        'number': results1[0][2],
                        'date': results1[0][3],
                        'issuedBy': results1[0][4]
                    }
                },
                'insuranceObject': {
                    'type': 'auto',
                    'category': results[0][4],
                    'modelText': modelText,
                    'bodyNumber': results[0][2],
                    'stateNumber': str(results[0][3]).upper(),
                    'registrationPlace': {
                        'id': utility.get(str(message.chat.id) + 'final_city_id'),
                    },
                    'registrationType': registration_type,  # –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –±—Ä–∞—Ç—å
                    'year': results[0][5],
                },
                'state': 'DRAFT',
                'bonusMalus': utility.get(str(message.chat.id) + 'min_bonus_malus')
            }
            print(f"–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ {modelText}")
    print(str(utility.get(str(message.chat.id) + 'doc_type')))
    print(type(utility.get(str(message.chat.id) + 'doc_type')))
    url_for_save_contract = 'https://web.ewa.ua/ewa/api/v9/contract/save'
    json_string = json.dumps(contract_data)
    r = requests.post(url_for_save_contract, headers=headers, cookies=cookies,
                      data=json_string)  # –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ß–ï–†–ù–û–í–ò–ö
    print(r)
    print(r.json())
    bad_data = 0
    try:
        id_contract = r.json()['id']
        utility.update({str(message.chat.id) + 'contract_id': id_contract})
    except KeyError:
        print('–ö–∞–∫–æ–µ-—Ç–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        bot.send_message(message.chat.id, '–Ø–∫—ñ—Å—å –¥–∞–Ω—ñ –±—É–ª–∏ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        bad_data = 1
    if bad_data == 1:
        prefinal(message)
    else:
        contract = utility.get(str(message.chat.id) + 'contract_id')
        url_for_req = f'https://web.ewa.ua/ewa/api/v9/contract/{contract}/state/REQUEST'
        r1 = requests.post(url_for_req, headers=headers, cookies=cookies)  # –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ó–ê–Ø–í–õ–ï–ù
        print(r1)
        url_for_otp = f'https://web.ewa.ua/ewa/api/v9/contract/{contract}/otp/send?customer=true'
        r_otp = requests.get(url_for_otp, headers=headers, cookies=cookies)
        print(r_otp)
        bot.send_message(message.chat.id,
                         'üì≤–ù–∞ –≤–∞—à –º–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –°–ú–° –∑ –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–ª—ñ—Å—É.\n\n–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è‚úç')
        dbworker.set_state(message.chat.id, config.States.S_OTP.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_OTP.value)
def otp(message):
    otp = message.text
    contract = utility.get(str(message.chat.id) + 'contract_id')
    url_otp_2 = f'https://web.ewa.ua/ewa/api/v9/contract/{contract}/otp?customer={otp}'
    r_otp_2 = requests.get(url_otp_2, headers=headers, cookies=cookies)
    print(r_otp_2)
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT * from user WHERE id='%s'" % message.from_user.id)
    results = q.fetchall()
    connection.commit()
    q.close()
    connection.close()

    # WAY FOR PAY

    random_integer = random.randint(10000, 99999)
    payment = utility.get(str(message.chat.id) + 'tariff_payment')
    product_name = f"–û–°–ê–¶–í –≤—ñ–¥ - {utility.get(str(message.chat.id) + 'tariff_name')}"
    # # # –∑–∞–ø—Ä–æ—Å –≤ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    # stri = f'zarazpolis_pp_ua;https://t.me/osago_insurance_bot;order{str(random_integer)};{message.date};1;UAH;{product_name};1;1'  # payment
    # key = config.wfp_key
    # hash = hmac.new(key.encode('utf-8'), stri.encode('utf-8')).hexdigest()
    # print(hash)
    # d = {
    #     "transactionType": "CREATE_INVOICE",
    #     "merchantAccount": "zarazpolis_pp_ua",
    #     "merchantDomainName": "https://t.me/osago_insurance_bot",
    #     "merchantSignature": hash,
    #     "apiVersion": 1,
    #     "language": 'ru',
    #     "serviceUrl": 'http://serviceurl.com',
    #     "orderReference": f'order{str(random_integer)}',  # —Ç—É—Ç –º–æ–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ
    #     "orderDate": message.date,
    #     "amount": '1',  # r.json()['insuranceObject']['payment']
    #     "currency": "UAH",
    #     "orderTimeout": 86400,
    #     "productName": [product_name],
    #     "productPrice": ['1'],  # r.json()['insuranceObject']['payment']
    #     "productCount": [1],
    #     "clientFirstName": results[0][6],
    #     "clientLastName": results[0][7],
    #     # "clientEmail": results[0][12],
    #     "clientPhone": results[0][13]
    # }
    # d_dumped = json.dumps(d)
    # print(d)
    # r2 = requests.post('https://api.wayforpay.com/api', data=d_dumped)
    # print(r2)
    # print(r2.json())
    # invoice = r2.json()['invoiceUrl']
    # bot.send_message(message.chat.id, f'–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µüí≥‚¨á\n{invoice}')
    # # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    # stri1 = f'zarazpolis_pp_ua;order{str(random_integer)}'
    # hash1 = hmac.new(key.encode('utf-8'), stri1.encode('utf-8')).hexdigest()
    # print(hash1)
    # d1 = {
    #     "transactionType": "CHECK_STATUS",
    #     "merchantAccount": "zarazpolis_pp_ua",
    #     "orderReference": f'order{str(random_integer)}',
    #     "merchantSignature": hash1,
    #     "apiVersion": 1
    # }
    # d1_dumped = json.dumps(d1)
    # print(d1)
    # bot.send_message(message.chat.id,
    #                  '–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –æ—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–∂–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂–∞‚è≥(–∑–∞–∑–≤–∏—á–∞–π —Ü–µ –∑–∞–π–º–∞—î ~5-10 —Ö–≤–∏–ª–∏–Ω)\n–ö–æ–ª–∏ –ø–ª–∞—Ç—ñ–∂ –±—É–¥–∏ –ø—Ä–∏–π–Ω—è—Ç–∏–π –≤–∞–º –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –ø—Ä–∏–π–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èüìß')
    # while True:
    #     r3 = requests.post('https://api.wayforpay.com/api', data=d1_dumped)
    #     print(r3.json())
    #     print(r3.json()['transactionStatus'])
    #     if r3.json()['transactionStatus'] == 'Approved':
    #         print('–ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à–µ–ª. –í—Å—ë –Ω–∞–π—Å')
    #         bot.send_message(message.chat.id,
    #                          '–ü–ª–∞—Ç—ñ–∂ –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!üì† –ù–µ–∑–∞–±–∞—Ä–æ–º –≤–∞—à –Ω–∞ –ø–æ—à—Ç—É –ø—Ä–∏–π–¥–µ –≤–∞—à –ø–æ–ª—ñ—Å –û–°–ê–¶–íüì¨')
    #         url_for_emi = f'https://web.ewa.ua/ewa/api/v9/contract/{contract_ids[0]}/state/EMITTED'
    #         rf = requests.post(url_for_emi, headers=headers, cookies=cookies)  # –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ó–ê–Ø–í–õ–ï–ù
    #         print(rf)
    #         print(rf.json())
    #         break
    #     if r3.json()['transactionStatus'] == 'Expired':
    #         bot.send_message(message.chat.id,
    #                          '–ó–∞–∫—ñ–Ω—á–∏–≤—Å—è —Ç–µ—Ä–º—ñ–Ω –æ–ø–ª–∞—Ç–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ /reset —â–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑ –ø–æ—á–∞—Ç–∫—É')
    #         break

    # LIQPAY
    order = f'order{str(random_integer)}'
    amount = round(payment * 100.)
    bot.send_invoice(message.chat.id,
                     title=product_name,
                     description='–°—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å –û–°–ê–¶–í',
                     invoice_payload=order,
                     provider_token=config.liqpay_token,
                     currency='UAH',
                     prices=[types.LabeledPrice(label='–ü–æ–ª–∏—Å', amount=amount)],
                     start_parameter='true',
                     photo_url='https://2.bp.blogspot.com/-u0_YERWDpQI/UiD3FMlV1yI/AAAAAAAAHJA/LhZtLmVkTvw/s1600/Mantenimiento.jpg')
    utility.update({str(message.chat.id) + 'order': order})


@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types='successful_payment')
def process_successful_payment(message: types.Message):
    print(message.successful_payment)
    # total_amount = message.successful_payment['total_amount']  TypeError: 'SuccessfulPayment' object is not subscriptable
    # payload = message.successful_payment['invoice_payload']
    print('–ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à–µ–ª. –í—Å—ë –Ω–∞–π—Å')
    contract = utility.get(str(message.chat.id) + 'contract_id')
    url_for_emi = f'https://web.ewa.ua/ewa/api/v9/contract/{contract}/state/EMITTED'
    rf = requests.post(url_for_emi, headers=headers, cookies=cookies)  # –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ó–ê–ö–õ–Æ–ß–ï–ù
    print(rf)
    bot.send_message(message.chat.id,
                     'üëå–ü–ª–∞—Ç—ñ–∂ –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!\n\nüì¨–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É, —è–∫—É –≤–∫–∞–∑—É–≤–∞–ª–∏ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ - –≤–∞—à –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –ø–æ–ª—ñ—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF –º–∞—î –±—É—Ç–∏ —Ç–∞–º.\n\nüëè–Ø–∫—â–æ –≤–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ –º–æ—î—é —Ä–æ–±–æ—Ç–æ—é - –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –º–Ω–æ—é, –±—É–¥—å-–ª–∞—Å–∫–∞, –∑ –¥—Ä—É–≥–æ–º  - https://t.me/osago_insurance_bot.')
    dbworker.clear_db(message.chat.id)
    try:
        utility.pop(str(message.chat.id) + 'city1')
        utility.pop(str(message.chat.id) + 'city2')
        utility.pop(str(message.chat.id) + 'city3')
        utility.pop(str(message.chat.id) + 'city4')
        utility.pop(str(message.chat.id) + 'tariff1')
        utility.pop(str(message.chat.id) + 'tariff2')
        utility.pop(str(message.chat.id) + 'tariff3')
        utility.pop(str(message.chat.id) + 'tariff4')
        utility.pop(str(message.chat.id) + 'tariff5')
        utility.pop(str(message.chat.id) + 'tariff6')
        utility.pop(str(message.chat.id) + 'tariff7')
        utility.pop(str(message.chat.id) + 'tariff8')
        utility.pop(str(message.chat.id) + 'car_year')
    except KeyError:
        pass


@bot.message_handler(func=lambda message: message.text == '–ó–º—ñ–Ω–∏—Ç–∏‚úñ')
def no(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button1 = types.KeyboardButton('–†—ñ–∫ –≤–∏–ø—É—Å–∫—É')
    button2 = types.KeyboardButton('–ü—Ä—ñ–∑–≤–∏—â–µ')
    button3 = types.KeyboardButton("–Ü'–º—è")
    button4 = types.KeyboardButton('–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ')
    button5 = types.KeyboardButton('–î–∞—Ç–∞ –Ω–∞—Ä–æ–∂–¥–µ–Ω–∏—è')
    button6 = types.KeyboardButton('–ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó')
    button7 = types.KeyboardButton('–Ü–ù–ü–ü')
    button8 = types.KeyboardButton('EMAIL')
    button9 = types.KeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω')
    button10 = types.KeyboardButton('–°–µ—Ä—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    button11 = types.KeyboardButton('–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    button12 = types.KeyboardButton('–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ')
    button13 = types.KeyboardButton('–û—Ä–≥–∞–Ω –≤–∏–¥–∞—á—ñ')
    button14 = types.KeyboardButton('–ê–≤—Ç–æ')
    markup.add(button14, button1, button2, button3, button4, button5, button6, button7, button8, button9, button10,
               button11,
               button12, button13)
    bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ê–≤—Ç–æ')
def change_auto(message):
    utility.update({str(message.chat.id) + 'car_changer': '1'})
    print(utility.get(str(message.chat.id) + 'car_changer'))
    auto_number(message)


@bot.message_handler(func=lambda message: message.text == '–†—ñ–∫ –≤–∏–ø—É—Å–∫—É')
def car_year_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É:‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_CAR_YEAR.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_CAR_YEAR.value)
def car_year_taking_again(message):
    log(message)
    v = message.text
    if len(v) != 4:
        bot.send_message(message.chat.id, '–†—ñ–∫ –≤–∏–ø—É—Å–∫—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 4 —Ü–∏—Ñ—Ä–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ 2020. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.')
        car_year_set(message)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("UPDATE user SET car_year='%s' WHERE id='%s'" % (v, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä—ñ–∑–≤–∏—â–µ')
def surname_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ(—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_SURNAME.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_SURNAME.value)
def surname_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET surname='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == "–Ü'–º—è")
def name_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º—è(—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_NAME.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_NAME.value)
def name_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET name='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ')
def patronymic_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º—è –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ(—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é):‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_PATRONYMIC.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_PATRONYMIC.value)
def patronymic_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET patronymic='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–î–∞—Ç–∞ –Ω–∞—Ä–æ–∂–¥–µ–Ω–∏—è')
def date_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–∂–¥–µ–Ω–∏—è(–≤ —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î):‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_DATE_OF_BIRTH.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_DATE_OF_BIRTH.value)
def date_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET date_of_birth='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó')
def address_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –ø—Ä–æ–ø–∏—Å–∫–∏(–≤ —Ñ–æ—Ä–º–∞—Ç—ñ "–ú—ñ—Å—Ç–æ,–í—É–ª–∏—Ü—è,–î—ñ–º,–ö–≤–∞—Ä—Ç–∏—Ä–∞"):‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_ADDRESS.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_ADDRESS.value)
def address_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET address='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–Ü–ù–ü–ü')
def inn_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ü–ù–ü–ü(10 —Ü–∏—Ñ—Ä):‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_INN.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_INN.value)
def inn_taking_again(message):
    log(message)
    v = message.text
    if len(v) != 10:
        bot.send_message(message.chat.id, '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ')
        inn_set(message)
    else:
        connection = sql.connect('DATABASE.sqlite')
        q = connection.cursor()
        q.execute("UPDATE user SET inn='%s' WHERE id='%s'" % (v, message.from_user.id))
        connection.commit()
        q.close()
        connection.close()
        prefinal(message)


@bot.message_handler(func=lambda message: message.text == 'EMAIL')
def email_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email(—Å—é–¥–∏ –±—É–¥–µ –≤–∏—Å–ª–∞–Ω–∏–π –ø–æ–ª—ñ—Å):‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_EMAIL.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_EMAIL.value)
def email_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET email='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–¢–µ–ª–µ—Ñ–æ–Ω')
def phone_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à  –º–æ—ñ–±–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_PHONE.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_PHONE.value)
def phone_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET phone='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–°–µ—Ä—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
def series_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É —Å–µ—Ä—ñ—é/–∑–∞–ø–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞:‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_SERIES.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_SERIES.value)
def series_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET series='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞')
def number_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_NUMBER.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_NUMBER.value)
def number_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET number='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ')
def date_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤–∏–¥–∞—á—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞(–≤ —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î):‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_DATE.value)


@bot.message_handler(func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_DATE.value)
def date_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET date='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(func=lambda message: message.text == '–û—Ä–≥–∞–Ω –≤–∏–¥–∞—á—ñ')
def issued_set(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –æ—Ä–≥–∞–Ω –≤–∏–¥–∞—á—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞:‚úç')
    dbworker.set_state(message.chat.id, config.States.S1_ISSUED_BY.value)


@bot.message_handler(
    func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S1_ISSUED_BY.value)
def issued_taking_again(message):
    log(message)
    v = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE passport SET issued_by='%s' WHERE id='%s'" % (v, message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    prefinal(message)


@bot.message_handler(content_types=['text'])
def text(message):
    if message.text[:10] == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or message.text[:10] == 'C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        st = message.text.split(' ')
        if 'txt' in st or '—Ç—Ö—Ç' in st:
            tg_analytic.analysis(st, message.chat.id)
            with open('%s.txt' % message.chat.id, 'r', encoding='UTF-8') as file:
                bot.send_document(message.chat.id, file)
            tg_analytic.remove(message.chat.id)
        else:
            messages = tg_analytic.analysis(st, message.chat.id)
            bot.send_message(message.chat.id, messages)


"""
    –ë–∞–≥–∏:
        –ò–Ω–æ–≥–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ
    –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:
        —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞(—Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç –∞–≤—Ç–æ)
        BankID
        –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –∑–∞ 2 –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–ª–∏—Å–∞
        QR - code —Å Liqpay –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –∫–æ–º–ø–∞
"""

# BOT RUNNING
if __name__ == '__main__':
    bot.polling(none_stop=True)
